pipeline {
    agent any

    environment {
        BASE_URL = credentials('xfit_base_url')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è'
                checkout scm
            }
        }

        stage('Install & Run Tests in Order') {
            steps {
                echo 'üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É'
                sh '''
                    python3 -m venv .venv
                    . .venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt

                    echo 'üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Allure'
                    rm -rf allure-results

                    echo 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ'
                    pytest --alluredir=allure-results \
                      tests/test_authorization_flow.py \
                      tests/test_get_clubs_list.py \
                      tests/test_get_club_details_guid.py \
                      tests/test_get_club_not_found.py
                '''
            }
        }

        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞'
                allure([
                    includeProperties: false,
                    jdk: '',
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'allure-results']]
                ])
            }
        }
    }

    post {
        always {
            echo 'üßπ –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
            sh 'rm -rf .venv'
        }

        failure {
            echo '‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ'
        }
    }
}
